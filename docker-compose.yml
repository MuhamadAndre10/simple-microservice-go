
name: 'microservices'
services:
  broker-service:
    build:
      context: .
      dockerfile: broker-service/Dockerfile
    restart: always
    ports:
      - "8080:80"
    deploy:
      mode: replicated
      replicas: 1
  auth-service:
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - .env
    build:
      context: .
      dockerfile: auth-service/Dockerfile
    restart: always
    environment:
      DSN: ${DSN}
    ports:
      - 8081:80
    deploy:
      mode: replicated
      replicas: 1
  logger-service:
    depends_on:
      mongo:
        condition: service_healthy
    build:
      context: .
      dockerfile: logger-service/Dockerfile
    restart: always
    ports:
      - "8082:80"
    deploy:
      mode: replicated
      replicas: 1
  postgres:
    image: 'postgres:14.2'
    ports:
      - "5432:5432"
    deploy:
      mode: replicated
      replicas: 1
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: root
      POSTGRES_DB: users
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
    volumes:
      - ./db-data/pg/:/var/lib/postgresql/data/
  mongo:
    image: 'mongo'
    ports:
      - "27017:27017"
    deploy:
      mode: replicated
      replicas: 1
    environment:
      MONGO_INITDB_DATABASE: logs
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root
    healthcheck:
      test: echo 'db.runCommand({find:"logs.devUser"}).ok' | mongosh --authenticationDatabase admin --host localhost -u root -p root admin --quiet | grep -q 1
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 20s
    volumes:
      - ./db-data/mongo/:/data/db/
